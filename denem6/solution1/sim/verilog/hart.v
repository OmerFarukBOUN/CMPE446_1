// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hart_hart,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.061271,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=129,HLS_SYN_LUT=1403,HLS_VERSION=2023_2_2}" *)

module hart (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inst,
        pc,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] inst;
input  [31:0] pc;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] rf_address0;
reg    rf_ce0;
reg    rf_we0;
reg   [30:0] rf_d0;
wire   [30:0] rf_q0;
wire   [4:0] rf_address1;
reg    rf_ce1;
wire   [30:0] rf_q1;
wire   [6:0] opcode_fu_180_p1;
reg   [6:0] opcode_reg_294;
reg   [4:0] rd_reg_298;
reg   [4:0] rs1_reg_305;
reg   [4:0] rs2_reg_311;
reg   [2:0] tmp4_reg_316;
reg   [6:0] tmp_s_reg_321;
wire  signed [30:0] sext_ln16_fu_244_p1;
reg  signed [30:0] sext_ln16_reg_326;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    grp_OP_AL_32I_fu_150_ap_ready;
reg   [5:0] grp_OP_AL_32I_fu_150_opcode_val;
reg   [30:0] grp_OP_AL_32I_fu_150_op1_val;
reg   [30:0] grp_OP_AL_32I_fu_150_op2_val;
wire   [31:0] grp_OP_AL_32I_fu_150_ap_return;
wire   [31:0] add_ln114_1_fu_274_p2;
reg   [31:0] ap_phi_mux_next_pc_phi_fu_144_p4;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln38_1_fu_252_p1;
wire   [0:0] trunc_ln38_fu_260_p1;
wire   [31:0] add_ln114_fu_268_p2;
wire   [63:0] zext_ln53_fu_248_p1;
wire   [63:0] zext_ln54_fu_256_p1;
wire   [0:0] grp_fu_164_p2;
wire   [63:0] zext_ln49_fu_264_p1;
wire   [63:0] zext_ln48_fu_280_p1;
wire   [63:0] zext_ln48_1_fu_284_p1;
wire   [11:0] imm_11_0_fu_234_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_condition_104;
reg    ap_condition_112;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

hart_rf_RAM_AUTO_1R1W #(
    .DataWidth( 31 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
rf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rf_address0),
    .ce0(rf_ce0),
    .we0(rf_we0),
    .d0(rf_d0),
    .q0(rf_q0),
    .address1(rf_address1),
    .ce1(rf_ce1),
    .q1(rf_q1)
);

hart_OP_AL_32I grp_OP_AL_32I_fu_150(
    .ap_ready(grp_OP_AL_32I_fu_150_ap_ready),
    .opcode_val(grp_OP_AL_32I_fu_150_opcode_val),
    .func7_val(tmp_s_reg_321),
    .func3_val(tmp4_reg_316),
    .op1_val(grp_OP_AL_32I_fu_150_op1_val),
    .op2_val(grp_OP_AL_32I_fu_150_op2_val),
    .ap_return(grp_OP_AL_32I_fu_150_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        opcode_reg_294 <= opcode_fu_180_p1;
        rd_reg_298 <= {{inst[11:7]}};
        rs1_reg_305 <= {{inst[19:15]}};
        rs2_reg_311 <= {{inst[24:20]}};
        sext_ln16_reg_326 <= sext_ln16_fu_244_p1;
        tmp4_reg_316 <= {{inst[14:12]}};
        tmp_s_reg_321 <= {{inst[31:25]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_112)) begin
            ap_phi_mux_next_pc_phi_fu_144_p4 = add_ln114_fu_268_p2;
        end else if ((1'b1 == ap_condition_104)) begin
            ap_phi_mux_next_pc_phi_fu_144_p4 = add_ln114_1_fu_274_p2;
        end else begin
            ap_phi_mux_next_pc_phi_fu_144_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_next_pc_phi_fu_144_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((opcode_reg_294 == 7'd51)) begin
            grp_OP_AL_32I_fu_150_op1_val = rf_q1;
        end else if ((opcode_reg_294 == 7'd19)) begin
            grp_OP_AL_32I_fu_150_op1_val = rf_q0;
        end else begin
            grp_OP_AL_32I_fu_150_op1_val = 'bx;
        end
    end else begin
        grp_OP_AL_32I_fu_150_op1_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((opcode_reg_294 == 7'd51)) begin
            grp_OP_AL_32I_fu_150_op2_val = rf_q0;
        end else if ((opcode_reg_294 == 7'd19)) begin
            grp_OP_AL_32I_fu_150_op2_val = sext_ln16_reg_326;
        end else begin
            grp_OP_AL_32I_fu_150_op2_val = 'bx;
        end
    end else begin
        grp_OP_AL_32I_fu_150_op2_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((opcode_reg_294 == 7'd51)) begin
            grp_OP_AL_32I_fu_150_opcode_val = 6'd51;
        end else if ((opcode_reg_294 == 7'd19)) begin
            grp_OP_AL_32I_fu_150_opcode_val = 6'd19;
        end else begin
            grp_OP_AL_32I_fu_150_opcode_val = 'bx;
        end
    end else begin
        grp_OP_AL_32I_fu_150_opcode_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rf_address0 = zext_ln48_1_fu_284_p1;
    end else if (((opcode_reg_294 == 7'd51) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0))) begin
        rf_address0 = zext_ln49_fu_264_p1;
    end else if (((opcode_reg_294 == 7'd19) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0))) begin
        rf_address0 = zext_ln54_fu_256_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rf_address0 = zext_ln53_fu_248_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rf_address0 = 5'd0;
    end else begin
        rf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((opcode_reg_294 == 7'd19) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)) | ((opcode_reg_294 == 7'd51) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        rf_ce0 = 1'b1;
    end else begin
        rf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rf_ce1 = 1'b1;
    end else begin
        rf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((opcode_reg_294 == 7'd19) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)) | ((opcode_reg_294 == 7'd51) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)))) begin
        rf_d0 = {{grp_OP_AL_32I_fu_150_ap_return[31:1]}};
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rf_d0 = 31'd0;
    end else begin
        rf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((opcode_reg_294 == 7'd19) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)) | ((opcode_reg_294 == 7'd51) & (1'b1 == ap_CS_fsm_state3) & (grp_fu_164_p2 == 1'd0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        rf_we0 = 1'b1;
    end else begin
        rf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (opcode_fu_180_p1 == 7'd51) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~(opcode_fu_180_p1 == 7'd51) & ~(opcode_fu_180_p1 == 7'd19) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((ap_start == 1'b1) & (opcode_fu_180_p1 == 7'd19) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_1_fu_274_p2 = (pc + 32'd5);

assign add_ln114_fu_268_p2 = (pc + 32'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_condition_104 = (((~(opcode_reg_294 == 7'd19) & ~(opcode_reg_294 == 7'd51)) | (~(opcode_reg_294 == 7'd51) & (trunc_ln38_1_fu_252_p1 == 1'd1))) | ((opcode_reg_294 == 7'd51) & (trunc_ln38_fu_260_p1 == 1'd1)));
end

always @ (*) begin
    ap_condition_112 = (((opcode_reg_294 == 7'd51) & (trunc_ln38_fu_260_p1 == 1'd0)) | ((trunc_ln38_1_fu_252_p1 == 1'd0) & (opcode_reg_294 == 7'd19)));
end

assign ap_return = ap_phi_mux_next_pc_phi_fu_144_p4;

assign grp_fu_164_p2 = ((rd_reg_298 == 5'd0) ? 1'b1 : 1'b0);

assign imm_11_0_fu_234_p4 = {{inst[31:20]}};

assign opcode_fu_180_p1 = inst[6:0];

assign rf_address1 = zext_ln48_fu_280_p1;

assign sext_ln16_fu_244_p1 = $signed(imm_11_0_fu_234_p4);

assign trunc_ln38_1_fu_252_p1 = grp_OP_AL_32I_fu_150_ap_return[0:0];

assign trunc_ln38_fu_260_p1 = grp_OP_AL_32I_fu_150_ap_return[0:0];

assign zext_ln48_1_fu_284_p1 = rs2_reg_311;

assign zext_ln48_fu_280_p1 = rs1_reg_305;

assign zext_ln49_fu_264_p1 = rd_reg_298;

assign zext_ln53_fu_248_p1 = rs1_reg_305;

assign zext_ln54_fu_256_p1 = rd_reg_298;

endmodule //hart
