-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hart is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inst : IN STD_LOGIC_VECTOR (31 downto 0);
    pc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hart is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hart_hart,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.061271,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=129,HLS_SYN_LUT=1403,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_13 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce0 : STD_LOGIC;
    signal rf_we0 : STD_LOGIC;
    signal rf_d0 : STD_LOGIC_VECTOR (30 downto 0);
    signal rf_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal rf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce1 : STD_LOGIC;
    signal rf_q1 : STD_LOGIC_VECTOR (30 downto 0);
    signal opcode_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal opcode_reg_294 : STD_LOGIC_VECTOR (6 downto 0);
    signal rd_reg_298 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs1_reg_305 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs2_reg_311 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_reg_321 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln16_fu_244_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln16_reg_326 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_OP_AL_32I_fu_150_ap_ready : STD_LOGIC;
    signal grp_OP_AL_32I_fu_150_opcode_val : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_OP_AL_32I_fu_150_op1_val : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_OP_AL_32I_fu_150_op2_val : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_OP_AL_32I_fu_150_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_1_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_next_pc_phi_fu_144_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln38_1_fu_252_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_fu_260_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln114_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imm_11_0_fu_234_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_condition_104 : BOOLEAN;
    signal ap_condition_112 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hart_OP_AL_32I IS
    port (
        ap_ready : OUT STD_LOGIC;
        opcode_val : IN STD_LOGIC_VECTOR (5 downto 0);
        func7_val : IN STD_LOGIC_VECTOR (6 downto 0);
        func3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        op1_val : IN STD_LOGIC_VECTOR (30 downto 0);
        op2_val : IN STD_LOGIC_VECTOR (30 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hart_rf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    rf_U : component hart_rf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 31,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rf_address0,
        ce0 => rf_ce0,
        we0 => rf_we0,
        d0 => rf_d0,
        q0 => rf_q0,
        address1 => rf_address1,
        ce1 => rf_ce1,
        q1 => rf_q1);

    grp_OP_AL_32I_fu_150 : component hart_OP_AL_32I
    port map (
        ap_ready => grp_OP_AL_32I_fu_150_ap_ready,
        opcode_val => grp_OP_AL_32I_fu_150_opcode_val,
        func7_val => tmp_s_reg_321,
        func3_val => tmp4_reg_316,
        op1_val => grp_OP_AL_32I_fu_150_op1_val,
        op2_val => grp_OP_AL_32I_fu_150_op2_val,
        ap_return => grp_OP_AL_32I_fu_150_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                opcode_reg_294 <= opcode_fu_180_p1;
                rd_reg_298 <= inst(11 downto 7);
                rs1_reg_305 <= inst(19 downto 15);
                rs2_reg_311 <= inst(24 downto 20);
                sext_ln16_reg_326 <= sext_ln16_fu_244_p1;
                tmp4_reg_316 <= inst(14 downto 12);
                tmp_s_reg_321 <= inst(31 downto 25);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, opcode_fu_180_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (opcode_fu_180_p1 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((opcode_fu_180_p1 = ap_const_lv7_33)) and not((opcode_fu_180_p1 = ap_const_lv7_13)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (opcode_fu_180_p1 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln114_1_fu_274_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_5));
    add_ln114_fu_268_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_condition_104_assign_proc : process(opcode_reg_294, trunc_ln38_1_fu_252_p1, trunc_ln38_fu_260_p1)
    begin
                ap_condition_104 <= (((not((opcode_reg_294 = ap_const_lv7_13)) and not((opcode_reg_294 = ap_const_lv7_33))) or (not((opcode_reg_294 = ap_const_lv7_33)) and (trunc_ln38_1_fu_252_p1 = ap_const_lv1_1))) or ((opcode_reg_294 = ap_const_lv7_33) and (trunc_ln38_fu_260_p1 = ap_const_lv1_1)));
    end process;


    ap_condition_112_assign_proc : process(opcode_reg_294, trunc_ln38_1_fu_252_p1, trunc_ln38_fu_260_p1)
    begin
                ap_condition_112 <= (((opcode_reg_294 = ap_const_lv7_33) and (trunc_ln38_fu_260_p1 = ap_const_lv1_0)) or ((trunc_ln38_1_fu_252_p1 = ap_const_lv1_0) and (opcode_reg_294 = ap_const_lv7_13)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_next_pc_phi_fu_144_p4_assign_proc : process(add_ln114_1_fu_274_p2, ap_CS_fsm_state3, add_ln114_fu_268_p2, ap_condition_104, ap_condition_112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((ap_const_boolean_1 = ap_condition_112)) then 
                ap_phi_mux_next_pc_phi_fu_144_p4 <= add_ln114_fu_268_p2;
            elsif ((ap_const_boolean_1 = ap_condition_104)) then 
                ap_phi_mux_next_pc_phi_fu_144_p4 <= add_ln114_1_fu_274_p2;
            else 
                ap_phi_mux_next_pc_phi_fu_144_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_next_pc_phi_fu_144_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_next_pc_phi_fu_144_p4;

    grp_OP_AL_32I_fu_150_op1_val_assign_proc : process(rf_q0, rf_q1, opcode_reg_294, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((opcode_reg_294 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_150_op1_val <= rf_q1;
            elsif ((opcode_reg_294 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_150_op1_val <= rf_q0;
            else 
                grp_OP_AL_32I_fu_150_op1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_150_op1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_OP_AL_32I_fu_150_op2_val_assign_proc : process(rf_q0, opcode_reg_294, sext_ln16_reg_326, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((opcode_reg_294 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_150_op2_val <= rf_q0;
            elsif ((opcode_reg_294 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_150_op2_val <= sext_ln16_reg_326;
            else 
                grp_OP_AL_32I_fu_150_op2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_150_op2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_OP_AL_32I_fu_150_opcode_val_assign_proc : process(opcode_reg_294, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((opcode_reg_294 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_150_opcode_val <= ap_const_lv6_33;
            elsif ((opcode_reg_294 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_150_opcode_val <= ap_const_lv6_13;
            else 
                grp_OP_AL_32I_fu_150_opcode_val <= "XXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_150_opcode_val <= "XXXXXX";
        end if; 
    end process;

    grp_fu_164_p2 <= "1" when (rd_reg_298 = ap_const_lv5_0) else "0";
    imm_11_0_fu_234_p4 <= inst(31 downto 20);
    opcode_fu_180_p1 <= inst(7 - 1 downto 0);

    rf_address0_assign_proc : process(ap_CS_fsm_state1, opcode_reg_294, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln53_fu_248_p1, zext_ln54_fu_256_p1, grp_fu_164_p2, zext_ln49_fu_264_p1, zext_ln48_1_fu_284_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_address0 <= zext_ln48_1_fu_284_p1(5 - 1 downto 0);
        elsif (((opcode_reg_294 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0))) then 
            rf_address0 <= zext_ln49_fu_264_p1(5 - 1 downto 0);
        elsif (((opcode_reg_294 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0))) then 
            rf_address0 <= zext_ln54_fu_256_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rf_address0 <= zext_ln53_fu_248_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_address0 <= ap_const_lv5_0;
        else 
            rf_address0 <= "XXXXX";
        end if; 
    end process;

    rf_address1 <= zext_ln48_fu_280_p1(5 - 1 downto 0);

    rf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, opcode_reg_294, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, grp_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((opcode_reg_294 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)) or ((opcode_reg_294 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rf_ce0 <= ap_const_logic_1;
        else 
            rf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_ce1 <= ap_const_logic_1;
        else 
            rf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rf_d0_assign_proc : process(ap_CS_fsm_state1, opcode_reg_294, grp_OP_AL_32I_fu_150_ap_return, ap_CS_fsm_state3, grp_fu_164_p2)
    begin
        if ((((opcode_reg_294 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)) or ((opcode_reg_294 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)))) then 
            rf_d0 <= grp_OP_AL_32I_fu_150_ap_return(31 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_d0 <= ap_const_lv31_0;
        else 
            rf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, opcode_reg_294, ap_CS_fsm_state3, grp_fu_164_p2)
    begin
        if ((((opcode_reg_294 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)) or ((opcode_reg_294 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_164_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rf_we0 <= ap_const_logic_1;
        else 
            rf_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln16_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_11_0_fu_234_p4),31));

    trunc_ln38_1_fu_252_p1 <= grp_OP_AL_32I_fu_150_ap_return(1 - 1 downto 0);
    trunc_ln38_fu_260_p1 <= grp_OP_AL_32I_fu_150_ap_return(1 - 1 downto 0);
    zext_ln48_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs2_reg_311),64));
    zext_ln48_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_305),64));
    zext_ln49_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_298),64));
    zext_ln53_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_305),64));
    zext_ln54_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_298),64));
end behav;
